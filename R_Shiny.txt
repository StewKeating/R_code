h1("for a main header")
h2("for secondary header")
em("for italics")
strong("for bold text")

library(colourPicker)
colourInput("id","label",value="orange")

library(plotly) #for interactive graphs
renderPlotly(ggplotly(ggplot(etc etc)))
PlotlyOutput('plotID')


downloadButton(outputID, label
output$download_data <- downloadHandler(
filename = "",
content = function(file){
write.csv(dataset, file)})

css <- "
#elementID{
insert CSS pairs}
"
tags$style(css)
######################
######################
######################
Conditional Panels

conditionalPanel(condition,...)
conditionalPanel(input."id"=="Something",
			showplot etc)

########################
#######################
#########################

isolate will stop reactive variables
isolate({input$1 + input$2})

actionButton(id, label




ui <- fluidPage(
textInput("name","Enter a name:"),
textOutput("q")
)

server <-function(input,output){
output$q <- renderText({
paste("Do you prefer dogs or cats,",input$name,"?")
})
}

######################
######################
######################
ui <- fluidPage(
titlePanel("Name of app"),
sidebarLayout(
	sidebarPanel(
		textInput("name","Enter a name:","david"),
			)
	mainPanel(
		plotOutput('trend')
	   	   )
		  )
)

server <-function(input,output){
output$trend <- renderPlot({
data_name<-subset(
babynames, name == input$name
			)

ggplot(data_name) + 
	geom_line(aes(x=year,y=prop,colour=sex))

or

ggplot(subset(babynames, name == input$name)+
geom_line(aes(x=year,y=prop,colour=sex))

})
}

###################
###################
?dateRangeInput
dateRangeInput(inputId,  label,  start ="yyyy-mm-dd" ,  end = "yyyy-mm-dd",
min = NULL,  max = NULL,  format = "yyyy-mm-dd")
help(checkboxInput)

radioButtons("inputId","label",choices = c("A","B","C"))
radioButtons("inputId","label",choices = c("Sentence 1"="A","Sentence 2"="B","Sentence 3"="C"))

selectInput("inputId","label",choices = c("A","B","C")) / mutliple = TRUE
selectInput("inputId","label",choices = unique(DF$col))
sliderInput("sliderId","label",value=##,min=##,max=##)
sliderInput("sliderId","label",value=c(LOWER,UPPER),min=##,max=##)
checkboxInput("checkID", "Label", value = TRUE/FALSE)
textAreaInput("id", "label", value, rows=)
fileInput("id", "label") -- input$id$datapath
readLines(input$id$datapath)


####################
####################
renderTable()
UI 	  tabPanel('table',tableOutput('table'))
Server  output$table <- renderTable({get_top_names(input$1,input$2)})

renderImage()
renderPlot()

####################
####################
interactive table DT
#UI
DT::DTOutput('DT_id')

#Server
output$DT_id <-DT::renderDT({data%>% DT::datatable})

interactive table plotly
#UI
plotly::plotlyOutput('plotly_id')

#Server
output$plotly_id <-plotly::renderPlotly()

##################################
##################################
##################################
Layouts & themes
shinythemes::themeSelector() # to pick a theme from drop down
theme = shinythemes::shinytheme('superhero'),

#tab layout
mainPanel(
tabsetPanel(
	tabPanel('tabname1',
		__Output()),
	tabPanel('tabname2',
		__Output())
		)

###################################
####################################
##################################

reactive source = stuff in the ui
ractive endpoint = output from the server displayed on the ui
reactive conductor = stuff in the server

reactive expressions
if in the server you are caluculating the same thing for multiple conductors, use Var <-reactive({insert calc}) # only executed once unles the value changes 
you can then use Var() as a function

####################################
####################################
####################################

observers # show information from inputs but dont save anything
server
observe({
	showNotification(
		paste('some text',input$var_from_input)
				)
	})

####################################
####################################
####################################
Stop - delay - trigger


server
#only exectures when the name has been entered, wont update for a change in greeting
output$greeting <-rednerText({
paste(isolate(input$greeting),input$name)})

#to show after an event (such as button clicked)
rv_greeting <- eventReactive(input$buttonName,
	{paste('Hello',input$name)})

output$greeting <-renderText({rv_greeting()})

#to show after event but only for display
observeEvent(input$buttonName, {showModal(
		modalDialog(paste('Hello',input$name)))})}


###########################################################
###########################################################
###########################################################
ui <- fluidPage(
  titlePanel("UFO Sightings"),
  sidebarLayout(
    sidebarPanel(
      selectInput("state", "Choose a U.S. state:", choices = unique(usa_ufo_sightings$state)),
      dateRangeInput("dates", "Choose a date range:",
                     start = "1920-01-01",
                     end = "1950-01-01")
    ),
    mainPanel(
      # Add plot output named 'shapes'
      plotOutput("shapes"),
      # Add table output named 'duration_table'
      tableOutput("duration_table")
    )
  )
)

server <- function(input, output) {
  # CODE BELOW: Create a plot output name 'shapes', of sightings by shape,
  # For the selected inputs
  output$shapes <- renderPlot({
    usa_ufo_sightings %>%
      filter(state == input$state,
             date_sighted >= input$dates[1],
             date_sighted <= input$dates[2]) %>%
      ggplot(aes(shape)) +
      geom_bar() +
      labs(x = "Shape", y = "# Sighted")
  })
  # CODE BELOW: Create a table output named 'duration_table', by shape, 
  # of # sighted, plus mean, median, max, and min duration of sightings
  # for the selected inputs
  output$duration_table <- renderTable({
    usa_ufo_sightings %>%
      filter(
        state == input$state,
        date_sighted >= input$dates[1],
        date_sighted <= input$dates[2]
      ) %>%
      group_by(shape) %>%
      summarize(
        nb_sighted = n(),
        avg_duration = mean(duration_sec),
        median_duration = median(duration_sec),
        min_duration = min(duration_sec),
        max_duration = max(duration_sec)
      )
  })
}

shinyApp(ui, server)

###################################
###################################
###################################
#custom error
server
output$x <- renderTable({
validate(need(input$r, !="", "PLease give a value of r"))})
or
validate(need(input$r, "PLease give a value of r"))

#####################################
#####################################
###################################

ui <- fluidPage(
  # CODE BELOW: Add an appropriate title
  titlePanel("2014 Mental Health in Tech Survey"),
  sidebarPanel(
    # CODE BELOW: Add a checkboxGroupInput
    checkboxGroupInput(
      inputId = "mental_health_consequence",
      label = "Do you think that discussing a mental health issue with your employer would have negative consequences?",
      choices = c("Maybe", "Yes", "No"),
      selected = "Maybe"
    ),
    # CODE BELOW: Add a pickerInput
    pickerInput(
      inputId = "mental_vs_physical",
      label = "Do you feel that your employer takes mental health as seriously as physical health?",
      choices = c("Don't Know", "No", "Yes"),
      multiple = TRUE
    )
  ),
  mainPanel(
    # CODE BELOW: Display the output
    plotOutput("age")
  )
)

server <- function(input, output, session) {
  # CODE BELOW: Build a histogram of the age of respondents
  # Filtered by the two inputs
  output$age <- renderPlot({
    mental_health_survey %>%
      filter(
        mental_health_consequence %in% input$mental_health_consequence,
        mental_vs_physical %in% input$mental_vs_physical
      ) %>%
      ggplot(aes(Age)) +
      geom_histogram()
  })
}

shinyApp(ui, server)

######################
#####################
#####################

ui <- bootstrapPage( #map displayed as main page with no side margins
theme = shinythemes::shinytheme('simplex')
leaflet::leafletOutput('map',width='100%, height='100%'),
absolutePanel(top = 10, right=10, id='controls',
sliderInput('nb_fatalities','minimum fatalities',1,40,10),
dateRangeInput('date_range','select date','2010-01-01','2019-12-01')
actionButton('show_about','About')
)
,tags$style(type = "text/css","
html, body{width:100%;height:100%}
#controls{background-color:white;padding:20px;}
")
)

server <-function(input,output,session){

observeEvent(input$show_about,{
showModal(modalDialog(text_about, title='about'))})


output$map<-leaflet::renderLeaflet({
rval_mass_shootings()%>%
leaflet()%>%
addTiles()%>%
setView(-98.58,39.82,zoom=5)%>% #lat long zoom
addCircleMarkers(popup = ~summary,
radius = ~fatalities,
fillcolor = 'red', color='red',weight=1)
})
}

rval_mass_shootings<-reactive({
mass_shootings%>%
filter(
date >= input$date[1],
date <= input$date[2],
fatalities >= input$nb_fatalities)
})
















